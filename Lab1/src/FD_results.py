from __future__ import print_function
import numpy as np
from scipy.io import loadmat
import pandas as pd
import cv2 as cv
import pickle
import os
import argparse
from typing import Any

class CarrousselManager:
    def __init__(self, num_images):
        self.num_images = num_images
        self.__current_idx = 0
        self.__unkown_key = True
        self.__next_key = False
        self.__prev_key = False
    
    def next(self):
        if self.__unkown_key:
            select_idx = self.__current_idx
            self.__current_idx += 1
            self.__unkown_key = False
            self.__next_key = True
        elif self.__next_key:
            select_idx = self.__current_idx
            self.__current_idx += 1
        elif self.__prev_key:
            select_idx = (self.__current_idx + 2) % self.num_images
            self.__current_idx += 3
            self.__prev_key = False
            self.__next_key = True
        
        self.__current_idx = self.__current_idx % self.num_images
        
        return select_idx
    
    def prev(self):
        if self.__unkown_key:
            select_idx = self.__current_idx
            self.__current_idx -= 1
            self.__unkown_key = False
            self.__prev_key = True
        elif self.__next_key:
            select_idx = (self.__current_idx - 2) % self.num_images
            self.__current_idx -= 3
            self.__next_key = False
            self.__prev_key = True
        elif self.__prev_key:
            select_idx = self.__current_idx
            self.__current_idx -= 1
        
        self.__current_idx = self.__current_idx % self.num_images

        return select_idx
        
        


class ImageHolder:
    
    def __init__(self, images_path):
        self.images_path = images_path
        self.__images = []
        self.num_images = 0
        
        
        for file in sorted(os.listdir(self.images_path)):
            self.__images.append(cv.imread(f"{self.images_path}/{file}"))
            self.num_images += 1
        
        self.carr_manager = CarrousselManager(self.num_images)
    
    def next(self):
        idx = self.carr_manager.next()
        return self.__images[idx]
    
    def prev(self):
        idx = self.carr_manager.prev()
        return self.__images[idx]


def load_matlab_file(file_path):
    data = loadmat(file_path)
    data = np.squeeze(data['AGC_Challenge1_TRAINING'])
    data = [[row.flat[0] if row.size == 1 else row for row in line] for line in data]
    
    return pd.DataFrame(data, columns=[['id', 'imageName', 'faceBox']])

def show_figures(df: pd.DataFrame, image_holder: ImageHolder, scores: list[Any]):
    bb_manager = CarrousselManager(image_holder.num_images)
    curr_image = image_holder.next()
    count = bb_manager.next()
    
    processed_images = {}
    for i in range(image_holder.num_images):
        processed_images[i] = False
        
    while True:
        # TODO: maybe show the error?
        # Add the bounding boxes if they have not been drawn yet
        if not processed_images[count]:
            true_bb = df.iloc[count]["ground_truth"]
            generated_bb = df.iloc[count]["generated"]
        
            for bb in true_bb:
                x1 = bb[0]
                y1 = bb[1]
                x2 = bb[2]
                y2 = bb[3]
                curr_image = cv.rectangle(curr_image, (x1, y1), (x2, y2), (0, 255, 0), 2)
            
            for bb in generated_bb:
                x1 = bb[0]
                y1 = bb[1]
                x2 = bb[2]
                y2 = bb[3]
                curr_image = cv.rectangle(curr_image, (x1, y1), (x2, y2), (255, 0, 0), 2)
                
            processed_images[count] = True
        
        image_name = df.iloc[count]["image_name"]
        cv.imshow(image_name, curr_image)
        print(f"F-score: {scores[count]}")
        key_pressed = cv.waitKey(0)
        
        if key_pressed == 27:
            cv.destroyAllWindows()
            break
        elif key_pressed == 100: # 'D'
            curr_image = image_holder.next()
            count = bb_manager.next()
        elif key_pressed == 97: # 'A'
            curr_image = image_holder.prev()
            count = bb_manager.prev()
        cv.destroyAllWindows()
    
        

parser = argparse.ArgumentParser(description="Face detector visualizator")

parser.add_argument("--ground_truth", required=True, help="Path to the ground truth bounding boxes of the faces")
parser.add_argument("--generated_results", required=True, help="Path to the bounding boxes generated by our model")
parser.add_argument("--images", required=True, help="Path to the folder where the images are stored")
parser.add_argument("--scores", required=True, help="Path to the file where the scores for each image are stored")

args = parser.parse_args()

ground_truth_path = args.ground_truth
generated_results_path = args.generated_results
images_path = args.images
scores_path = args.scores

with open(generated_results_path, "rb") as file:
    generated_results = pickle.load(file)

with open(scores_path, "rb") as file:
    scores = pickle.load(file)

ground_truth = load_matlab_file(ground_truth_path)

image_holder = ImageHolder(images_path)

bounding_boxes_df = pd.DataFrame(columns=["ground_truth", "generated"])
bounding_boxes_df["ground_truth"] = ground_truth['faceBox']
bounding_boxes_df["generated"] = generated_results
bounding_boxes_df["image_name"] = ground_truth['imageName']

show_figures(bounding_boxes_df, image_holder, scores)